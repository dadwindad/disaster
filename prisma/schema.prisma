// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////model//////////////////////

model User_status {
  user_status_id Int    @id
  status_des     String
  userId         User[]
}

model User_type {
  user_type_id  Int    @id
  user_type_des String
  userId        User[]
}

model User {
  user_ciz_id               String       @id @db.VarChar(13)
  username                  String       @unique
  password                  String?
  user_fname                String?
  user_lname                String?
  user_tel                  String?
  user_avatar               String?
  user_type                 Int
  date_create               DateTime?
  date_update               DateTime?
  User_type                 User_type?   @relation(fields: [user_typeUser_type_id], references: [user_type_id])
  user_typeUser_type_id     Int?
  User_status               User_status? @relation(fields: [user_statusUser_status_id], references: [user_status_id])
  user_statusUser_status_id Int?
}

model Risk {
  risk_lv     Int       @id
  risk_des    String
  risk_ub     Float?
  risk_lb     Float
  date_create DateTime?
  date_update DateTime?
}

model Factor {
  factor_id      Int       @id
  factor_abbrev  String
  factor_name    String
  factor_wweight Float
  date_create    DateTime?
  date_update    DateTime?
}

model Home_member {
  home_id          String        @id @db.VarChar(13)
  member_ciz_id    String        @unique
  member_fname     String
  member_lname     String
  member_birth_day DateTime?
  date_create      DateTime?
  date_update      DateTime?
  member_info_id   Member_info[]
}

model Member_info {
  member_info_id     Int          @id @default(autoincrement())
  member_ciz_id      String       @db.VarChar(13)
  member_occupation  String?
  member_poor        String?
  date_create        DateTime?
  date_update        DateTime?
  Home_member        Home_member? @relation(fields: [home_memberHome_id], references: [home_id])
  home_memberHome_id String?      @db.VarChar(13)
}

model Dashboard {
  dashboard_id Int       @id @default(autoincrement())
  risk_lv_1    Float?
  risk_lv_2    Float?
  risk_lv_3    Float?
  risk_lv_4    Float?
  H_lv         Float?
  E_lv         Float?
  V_lv         Float?
  C_lv         Float?
  date_create  DateTime?
}

model Dashboard_sub_lv {
  sub_lv           Int             @id
  sub_lv_des       String
  dashboard_sub_id Dashboard_sub[]
}

model Dashboard_sub {
  dashboard_sub_id       Int               @id @default(autoincrement())
  risk_lv                Float?
  H_lv                   Float?
  E_lv                   Float?
  V_lv                   Float?
  C_lv                   Float?
  mo_num                 Int?
  house_num              Int?
  people_num             Int?
  polygon_id             Int?
  sub_lv                 Int
  date_create            DateTime?
  Dashboard_sub_lv       Dashboard_sub_lv? @relation(fields: [dashboard_sub_lvSub_lv], references: [sub_lv])
  dashboard_sub_lvSub_lv Int?
}

model Study_lv {
  study_lv         Int                    @id
  study_des        String
  questionnaire_id Questionnaire_part_1[]
}

model Occupation {
  occupation_id    Int                    @id
  occupation_des   String
  questionnaire_id Questionnaire_part_1[]
}

model Gender {
  gender           Int                    @id
  gender_des       String
  questionnaire_id Questionnaire_part_1[]
}

model Questionnaire_part_1 {
  Questionnaire_part_1    Int             @id @default(autoincrement())
  q_fname                 String?
  q_lname                 String?
  q_gender                Int?
  q_birth_of_date         DateTime?
  q_study_max_lv          Int?
  Study_lv                Study_lv?       @relation(fields: [study_lvStudy_lv], references: [study_lv])
  study_lvStudy_lv        Int?
  occupation_id           Int?
  Occupation              Occupation?     @relation(fields: [occupationOccupation_id], references: [occupation_id])
  occupationOccupation_id Int?
  occupation_other        String?
  questionnaire_id        Questionnaire[]
  Gender                  Gender?         @relation(fields: [genderGender], references: [gender])
  genderGender            Int?
}

model Lack_water_freq {
  lack_water_freq      Int                    @id @default(autoincrement())
  lack_water_freq_des  String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Lack_water_long {
  lack_water_long      Int                    @id @default(autoincrement())
  lack_water_long_des  String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Prevent_info {
  prevent_info         Int                    @id @default(autoincrement())
  prevent_info_des     String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Disaster_trianning {
  disaster_trianning     Int                    @id @default(autoincrement())
  disaster_trianning_des String
  questionnaire_part_2   Questionnaire_part_2[]
}

model Water_pump {
  water_pump           Int                    @id @default(autoincrement())
  water_pump_des       String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Water_reserve_type {
  water_reserve_type     Int             @id @default(autoincrement())
  water_reserve_type_des String
  water_reserv           Water_reserve[]
}

model Water_reserve_amount {
  water_reserve_amount     Int                    @id @default(autoincrement())
  water_reserve_amount_des String
  questionnaire_part_2     Questionnaire_part_2[]
}

model Water_reserve {
  water_reserve                        Int                    @id @default(autoincrement())
  questionnaire_part_2                 Questionnaire_part_2[]
  Water_reserve_type                   Water_reserve_type?    @relation(fields: [water_reserve_typeWater_reserve_type], references: [water_reserve_type])
  water_reserve_typeWater_reserve_type Int?
}

model Groundwater {
  groundwater          Int                    @id @default(autoincrement())
  groundwater_des      String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Assistance {
  assistance           Int                    @id @default(autoincrement())
  assistance_des       String
  questionnaire_part_2 Questionnaire_part_2[]
}

model Irrigation {
  irrigation             Int                      @id
  irrigation_des         String
  occupation_agriculture Occupation_agriculture[]
}

model Water_sufficient {
  water_sufficient       Int                      @id @unique
  water_sufficient_des   String
  occupation_agriculture Occupation_agriculture[]
  occupation_livestock   Occupation_livestock[]
  Occupation_fishing     Occupation_fishing[]
  Occupation_other       Occupation_other[]
}

model Occupation_agriculture {
  occupation_agriculture Int         @id @default(autoincrement())
  plant_name             String?
  latitude               String?
  longitude              String?
  start_date             DateTime?
  finish_date            DateTime?
  area                   Float?
  product_amount         Float?
  Irrigation             Irrigation? @relation(fields: [irrigationIrrigation], references: [irrigation])
  irrigationIrrigation   Int?
  water_source_name      String?
  water_source_distance  Float?

  questionnaire_part_2             Questionnaire_part_2[]
  Water_sufficient                 Water_sufficient?      @relation(fields: [water_sufficientWater_sufficient], references: [water_sufficient])
  water_sufficientWater_sufficient Int?
}

model Lack_water_freq_agriculture {
  lack_water_freq_agriculture     Int                    @id
  lack_water_freq_agriculture_des String
  questionnaire_part_2            Questionnaire_part_2[]
}

model Lack_water_freq_livestock {
  lack_water_freq_livestock     Int                    @id
  Lack_water_freq_livestock_des String
  questionnaire_part_2          Questionnaire_part_2[]
}

model Lack_water_long_livestock {
  lack_water_long_livestock     Int                    @id
  Lack_water_long_livestock_des String
  questionnaire_part_2          Questionnaire_part_2[]
}

model Occupation_livestock {
  occupation_livestock  Int     @id @default(autoincrement())
  animal                String?
  latitude              String?
  longitude             String?
  amount                Int?
  area_size             Float?
  water_aount_day       Float?
  water_source_name     String?
  water_source_distance Float?

  questionnaire_part_2             Questionnaire_part_2[]
  Water_sufficient                 Water_sufficient?      @relation(fields: [water_sufficientWater_sufficient], references: [water_sufficient])
  water_sufficientWater_sufficient Int?
}

model Lack_water_freq_fishing {
  lack_water_freq_fishing     Int                    @id
  Lack_water_freq_fishing_des String
  questionnaire_part_2        Questionnaire_part_2[]
}

model Occupation_fishing {
  occupation_fishing    Int     @id @default(autoincrement())
  animal                String?
  latitude              String?
  longitude             String?
  amount                Int?
  pond_size             Float?
  water_aount_day       Float?
  water_source_name     String?
  water_source_distance Float?

  questionnaire_part_2             Questionnaire_part_2[]
  Water_sufficient                 Water_sufficient?      @relation(fields: [water_sufficientWater_sufficient], references: [water_sufficient])
  water_sufficientWater_sufficient Int?
}

model Lack_water_freq_other {
  lack_water_freq_other       Int                    @id
  Lack_water_freq_fishing_des String
  questionnaire_part_2        Questionnaire_part_2[]
}

model Lack_water_long_other {
  lack_water_long_other     Int                    @id
  Lack_water_long_other_des String
  questionnaire_part_2      Questionnaire_part_2[]
}

model Occupation_other {
  occupation_other      Int     @id @default(autoincrement())
  occupation_name       String?
  latitude              String?
  longitude             String?
  occupation_area       Float?
  water_aount_day       Float?
  water_source_name     String?
  water_source_distance Float?

  questionnaire_part_2             Questionnaire_part_2[]
  Water_sufficient                 Water_sufficient?      @relation(fields: [water_sufficientWater_sufficient], references: [water_sufficient])
  water_sufficientWater_sufficient Int?
}

model Questionnaire_part_2 {
  Questionnaire_part_2                                   Int                          @id @default(autoincrement())
  home_no                                                String?
  latitude                                               String?
  logitude                                               String?
  income                                                 Int?
  member_num_real                                        Int?
  water_use_volume                                       Float?
  water_use_charge                                       Float?
  questionnaire_id                                       Questionnaire[]
  Water_source                                           Water_source?                @relation(fields: [water_sourceWater_source_id], references: [water_source_id])
  water_sourceWater_source_id                            Int?
  member_weak_num                                        Int?
  member_weak_bed                                        Int?
  member_weak_disabled                                   Int?
  member_old                                             Int?
  member_children                                        Int?
  member_hidden                                          Int?
  member_hidden_note                                     String?
  Lack_water_freq                                        Lack_water_freq?             @relation(fields: [lack_water_freqLack_water_freq], references: [lack_water_freq])
  lack_water_freqLack_water_freq                         Int?
  Lack_water_long                                        Lack_water_long?             @relation(fields: [lack_water_longLack_water_long], references: [lack_water_long])
  lack_water_longLack_water_long                         Int?
  Prevent_info                                           Prevent_info?                @relation(fields: [prevent_infoPrevent_info], references: [prevent_info])
  prevent_infoPrevent_info                               Int?
  Water_pump                                             Water_pump?                  @relation(fields: [water_pumpWater_pump], references: [water_pump])
  water_pumpWater_pump                                   Int?
  Water_reserve                                          Water_reserve?               @relation(fields: [water_reserveWater_reserve], references: [water_reserve])
  water_reserveWater_reserve                             Int?
  Water_reserve_amount                                   Water_reserve_amount?        @relation(fields: [water_reserve_amountWater_reserve_amount], references: [water_reserve_amount])
  water_reserve_amountWater_reserve_amount               Int?
  Groundwater                                            Groundwater?                 @relation(fields: [groundwaterGroundwater], references: [groundwater])
  groundwaterGroundwater                                 Int?
  assistance_note                                        String?
  Occupation_agriculture                                 Occupation_agriculture?      @relation(fields: [occupation_agricultureOccupation_agriculture], references: [occupation_agriculture])
  occupation_agricultureOccupation_agriculture           Int?
  Lack_water_freq_agriculture                            Lack_water_freq_agriculture? @relation(fields: [lack_water_freq_agricultureLack_water_freq_agriculture], references: [lack_water_freq_agriculture])
  lack_water_freq_agricultureLack_water_freq_agriculture Int?
  lack_water_max_long_agriculture                        String?
  lack_water_month_agriculture                           String?
  Lack_water_freq_livestock                              Lack_water_freq_livestock?   @relation(fields: [lack_water_freq_livestockLack_water_freq_livestock], references: [lack_water_freq_livestock])
  lack_water_freq_livestockLack_water_freq_livestock     Int?
  Lack_water_long_livestock                              Lack_water_long_livestock?   @relation(fields: [lack_water_long_livestockLack_water_long_livestock], references: [lack_water_long_livestock])
  lack_water_long_livestockLack_water_long_livestock     Int?
  lack_water_month_livestock                             String?
  Occupation_livestock                                   Occupation_livestock?        @relation(fields: [occupation_livestockOccupation_livestock], references: [occupation_livestock])
  occupation_livestockOccupation_livestock               Int?
  Occupation_fishing                                     Occupation_fishing?          @relation(fields: [occupation_fishingOccupation_fishing], references: [occupation_fishing])
  occupation_fishingOccupation_fishing                   Int?
  lack_water_max_long_fishing                            String?
  lack_water_month_fishing                               String?
  Lack_water_freq_fishing                                Lack_water_freq_fishing?     @relation(fields: [lack_water_freq_fishingLack_water_freq_fishing], references: [lack_water_freq_fishing])
  lack_water_freq_fishingLack_water_freq_fishing         Int?
  Occupation_other                                       Occupation_other?            @relation(fields: [occupation_otherOccupation_other], references: [occupation_other])
  occupation_otherOccupation_other                       Int?
  Lack_water_freq_other                                  Lack_water_freq_other?       @relation(fields: [lack_water_freq_otherLack_water_freq_other], references: [lack_water_freq_other])
  lack_water_freq_otherLack_water_freq_other             Int?
  Lack_water_long_other                                  Lack_water_long_other?       @relation(fields: [lack_water_long_otherLack_water_long_other], references: [lack_water_long_other])
  lack_water_long_otherLack_water_long_other             Int?
  suggestion                                             String?
  Disaster_trianning                                     Disaster_trianning?          @relation(fields: [disaster_trianningDisaster_trianning], references: [disaster_trianning])
  disaster_trianningDisaster_trianning                   Int?
  Assistance                                             Assistance?                  @relation(fields: [assistanceAssistance], references: [assistance])
  assistanceAssistance                                   Int?
}

model Questionnaire {
  questionnaire_id                         Int                   @id
  date_create                              DateTime?
  date_update                              DateTime?
  Questionnaire_part_1                     Questionnaire_part_1? @relation(fields: [questionnaire_part_1Questionnaire_part_1], references: [Questionnaire_part_1])
  questionnaire_part_1Questionnaire_part_1 Int?
  Questionnaire_part_2                     Questionnaire_part_2? @relation(fields: [questionnaire_part_2Questionnaire_part_2], references: [Questionnaire_part_2])
  questionnaire_part_2Questionnaire_part_2 Int?
}

model Water_source_type {
  water_source_type Int            @id
  water_source_des  String
  water_source      Water_source[]
}

model Water_source {
  water_source_id                    Int                    @id @default(autoincrement())
  name                               String?
  latitude                           String?
  logitude                           String?
  volume                             Float
  distance                           Float
  Water_source_type                  Water_source_type?     @relation(fields: [water_source_typeWater_source_type], references: [water_source_type])
  water_source_typeWater_source_type Int?
  Questionnaire_part_2               Questionnaire_part_2[]
}
